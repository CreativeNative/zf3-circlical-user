<?php

namespace CirclicalUser\Entity;

use CirclicalUser\Provider\AuthenticationRecordInterface;
use CirclicalUser\Provider\RoleInterface;
use CirclicalUser\Provider\UserInterface;
use DateTime;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity
 * @ORM\Table(name="users")
 */
class User implements UserInterface
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private ?int $id = null;

    /** @ORM\Column(length=50, unique=true) */
    private string $email;

    /**
     * @ORM\ManyToMany(targetEntity="CirclicalUser\Entity\Role")
     * @ORM\JoinTable(name="users_roles",
     *      joinColumns={@ORM\JoinColumn(name="user_id", referencedColumnName="id", onDelete="CASCADE")},
     *      inverseJoinColumns={@ORM\JoinColumn(name="role_id", referencedColumnName="id")}
     *      )
     */
    private Collection $roles;

    private ?AuthenticationRecordInterface $authenticationRecord = null;

    /**
     * @ORM\OneToMany(
     *     targetEntity="CirclicalUser\Entity\UserApiToken",
     *     mappedBy="user",
     *     orphanRemoval=true,
     *     cascade={"persist", "remove"}
     *     );
     */
    private Collection $api_tokens;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    private ?DateTime $created = null;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    private ?DateTime $updated = null;

    public function __construct()
    {
        $this->roles = new ArrayCollection();
        $this->api_tokens = new ArrayCollection();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function setEmail(string $email): void
    {
        $this->email = $email;
    }

    public function getEmail(): string
    {
        return $this->email;
    }

    public function addRole(RoleInterface $role): void
    {
        $this->roles[] = $role;
    }

    public function getRoles(): iterable
    {
        return $this->roles;
    }

    public function getRolesAsString(): string
    {
        $roleList = '';

        $count = count($this->roles);
        $i = 0;
        foreach ($this->roles as $role) {
            /** @var $role Role */
            $roleList .= $role->getName();
            if ($i < $count - 1) {
                $roleList .= ', ';
            }
            $i++;
        }

        return $roleList;
    }

    public function hasRole(RoleInterface $roleName): bool
    {
        foreach ($this->roles as $userRole) {
            if ($userRole === $roleName) {
                return true;
            }
        }

        return false;
    }

    public function hasRoleWithName(string $roleName): bool
    {
        foreach ($this->roles as $userRole) {
            if ($userRole->getName() === $roleName) {
                return true;
            }
        }

        return false;
    }

    public function setAuthenticationRecord(AuthenticationRecordInterface $authentication): void
    {
        $this->authenticationRecord = $authentication;
    }

    public function getAuthenticationRecord(): ?AuthenticationRecordInterface
    {
        return $this->authenticationRecord;
    }

    public function addApiToken(UserApiToken $token): void
    {
        $this->api_tokens->add($token);
    }

    public function getApiTokens(): ?Collection
    {
        return $this->api_tokens;
    }

    public function getApiTokenWithId(string $uuid): ?UserApiToken
    {
        foreach ($this->api_tokens as $token) {
            if ($token->getToken() === $uuid) {
                return $token;
            }
        }
        return null;
    }

    public function removeApiToken(UserApiToken $token): void
    {
        if (!$this->api_tokens->contains($token)) {
            return;
        }
        $this->api_tokens->removeElement($token);
    }

    public function getCreated(): ?DateTime
    {
        return $this->created;
    }

    public function setCreated(?DateTime $created): void
    {
        $this->created = $created;
    }

    public function getUpdated(): ?DateTime
    {
        return $this->updated;
    }

    public function setUpdated(?DateTime $updated): void
    {
        $this->updated = $updated;
    }
}
